OLD PERCENT CELL IN CASE:
	if(!input.contains("."))
		doubleValue = Double.parseDouble(input.substring(0, input.length()-2) + "." + input.substring(input.length()-2,input.length()));
	else if(percentValue < 1 && percentValue >= 0)
		doubleValue = Double.parseDouble("0.00" + input.substring(dot+1));
	else if(percentValue >= 100 || percentValue <= -100)
		doubleValue = Double.parseDouble(input.substring(0,dot-2) + "." + input.substring(dot+1,input.length()));
	else if(percentValue < 100 & percentValue >= 10)
		doubleValue = Double.parseDouble("0." + input.substring(0,dot) + input.substring(dot+1,input.length()));
	else if(percentValue > -100 && percentValue <= -10)
		doubleValue = Double.parseDouble("-0." + input.substring(1,dot) + input.substring(dot+1,input.length()));
	else if(percentValue < 10 && percentValue >= 1)
		doubleValue = Double.parseDouble("0.00" + input.charAt(0) + input.substring(dot+1));
	else 
		doubleValue = Double.parseDouble("-0.00" + input.charAt(1) + input.substring(dot+1));
		
		
OLD checkForErrors:
private String checkForErrors(String c){
		if(!c.contains(" ")){
			if(c.length() > 3 && !c.equalsIgnoreCase("clear")){
				return "ERROR: Invalid command.\n";
			}
			else{
				for(int row = 0; row < 20; row++){
					for(int col = 0; col < 12; col++){
						String cellName = getColumnLetterFromColumnNumber(col) + (row+1);
						if(cellName.equalsIgnoreCase(c))
							return"";
					}
				}
				return "ERROR: Invalid command.\n";
			}
		}
		if(c.contains("  ") || c.startsWith(" ") || c.endsWith(" "))
			return "ERROR: Invalid command.\n";
		String[] coms = c.split(" ", 3);
		if(coms[0].equals("history") || coms[0].equals("save") || coms[0].equals("open"))
			return "";
		if(coms.length == 2 && !coms[0].equalsIgnoreCase("clear"))
			return "ERROR: Invalid command.\n";
		int cellRow;
		if(coms[0].equalsIgnoreCase("clear")){
			cellRow = Integer.parseInt(coms[1].substring(1));
		}
		else{
			cellRow = Integer.parseInt(coms[0].substring(1));
		}
		if(cellRow > 20 || cellRow < 1)
			return "ERROR: Invalid command.\n";
		if(coms[0].equalsIgnoreCase("clear"))
			return "";
		if(getColumnNumberFromColumnLetter(coms[0].substring(0, 1)) > 11)
			return "ERROR: Invalid command.\n";
		if(coms[2].contains("\"")){
			if(!coms[2].startsWith("\"") || !coms[2].endsWith("\""))
				return "ERROR: Invalid command.\n";
			else
				return "";
		}
		if(coms.length == 3){
			if(c.contains(" -")){
				return "";
			}
			if(coms[2].contains("+") || coms[2].contains("-") ||  coms[2].contains("*") || coms[2].contains("/")){
				if(!coms[2].contains("(") || !coms[2].contains(")") || !coms[2].contains(" ")){
					return "ERROR: Invalid command.\n";
				}
			}
			if(coms[2].endsWith("%"))
				return "";
			if(coms[2].indexOf(".",coms[2].indexOf(".")+1) != -1)
				return "ERROR: Invalid command.\n";
			for(int i = 0; i < 26; i++){
				if(coms[2].contains(getColumnLetterFromColumnNumber(i+1)) || coms[2].contains(getColumnLetterFromColumnNumber(i+1).toLowerCase()))
					return "ERROR: Invalid command.\n";
			}
		}
		return "";
	}